name: Playwright Tests with Allure Report

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch: # Allows manual triggering

# Permisos necesarios para GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Playwright Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.ci  # Especifica el Dockerfile para CI
          push: false
          load: true
          tags: playwright-tests:${{ github.sha }}
          
      - name: Run Playwright tests in Docker
        run: |
          # Crear directorios para reportes
          mkdir -p allure-results
          mkdir -p allure-report
          
          # Ejecutar el contenedor y capturar logs
          echo "üöÄ Iniciando tests de Playwright con Allure..."
          docker run --name playwright-test-container \
            -v $PWD/allure-results:/app/allure-results \
            -v $PWD/allure-report:/app/allure-report \
            playwright-tests:${{ github.sha }} > test_output.log 2>&1
          
          # Obtener el c√≥digo de salida
          EXIT_CODE=$?
          
          # Mostrar logs completos
          echo "üìã Logs de la ejecuci√≥n:"
          cat test_output.log
          
          # Copiar archivos desde el contenedor si existen
          if docker ps -a --format "table {{.Names}}" | grep -q playwright-test-container; then
            echo "üìä Copiando resultados de Allure..."
            docker cp playwright-test-container:/app/allure-results ./ 2>/dev/null || echo "‚ö†Ô∏è  No se pudieron copiar allure-results"
            docker cp playwright-test-container:/app/allure-report ./ 2>/dev/null || echo "‚ö†Ô∏è  No se pudo copiar allure-report"
            docker rm playwright-test-container 2>/dev/null || true
          fi
          
          # Verificar si se generaron los reportes
          if [ -d "allure-results" ] && [ "$(ls -A allure-results)" ]; then
            echo "‚úÖ Resultados de Allure generados exitosamente"
            ls -la allure-results/
          fi
          
          if [ -d "allure-report" ] && [ "$(ls -A allure-report)" ]; then
            echo "‚úÖ Reporte HTML de Allure generado exitosamente"
            ls -la allure-report/
          fi
          
          # Salir con el c√≥digo de salida de los tests
          exit $EXIT_CODE
          
      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages
          
      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@master
        if: always()
        with:
          allure_results: allure-results
          allure_report: allure-report
          gh_pages: gh-pages
          allure_history: allure-history
          keep_reports: 20
          
      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.run_number }}
          path: allure-results/
          retention-days: 30
          
      - name: Upload Allure report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_number }}
          path: allure-report/
          retention-days: 30

      # Configurar GitHub Pages
      - name: Setup Pages
        if: always() && github.ref == 'refs/heads/master'
        uses: actions/configure-pages@v4

      # Verificar que allure-history existe y tiene contenido
      - name: Check allure-history
        if: always() && github.ref == 'refs/heads/master'
        run: |
          if [ -d "allure-history" ] && [ "$(ls -A allure-history)" ]; then
            echo "‚úÖ allure-history directory exists and has content"
            ls -la allure-history/
          else
            echo "‚ùå allure-history directory is empty or doesn't exist"
            echo "Creating a basic index.html file"
            mkdir -p allure-history
            echo "<html><body><h1>Allure Report will be available after first test run</h1></body></html>" > allure-history/index.html
          fi

      # Subir el directorio allure-history como artefacto de Pages
      - name: Upload Pages artifact
        if: always() && github.ref == 'refs/heads/master'
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-history

      # Desplegar a GitHub Pages
      - name: Deploy to GitHub Pages
        if: always() && github.ref == 'refs/heads/master'
        id: deployment
        uses: actions/deploy-pages@v4
          
      - name: Add Pages URL to summary
        if: always() && github.ref == 'refs/heads/master'
        run: |
          echo "## üìä Allure Report" >> $GITHUB_STEP_SUMMARY
          echo "üåê **Report URL**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
          echo "‚è∞ **Generated**: $(date)" >> $GITHUB_STEP_SUMMARY